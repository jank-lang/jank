#!/usr/bin/env bb

(ns jank.test.ahead-of-time
  (:require
   [babashka.fs :as fs]
   [babashka.process :as proc]
   [clojure.string :as str]
   [clojure.test :as t :refer [deftest is testing use-fixtures]]))

(def this-nsym (ns-name *ns*))

;; TODO: Remove. This will not be required once we get library dirs 
;; and headers from cmake config
(def jank-path
  (-> (proc/sh "which jank") :out str/trim))

(def jank-build-dir (fs/parent jank-path))

(def lib-paths
  ;; TODO: These library paths should be included
  ;; in the jank's aot/processor.cpp
  (let [libs-relative-paths ["/" "/third-party/libzippp"
                             "/third-party/ftxui"
                             "/third-party/cpptrace"
                             "/_deps/libdwarf-build/src/lib/libdwarf"]]
    (->> libs-relative-paths
         (map (fn [lib] (str "-L" jank-build-dir lib)))
         (str/join " "))))

(def jank-exe
  (str jank-path " -DIMMER_HAS_LIBGC " lib-paths))

(defn module-path [alias]
  (-> (proc/sh "clojure" (str "-A:" alias) "-Spath") :out str/trim))

(defn find-binary [{:keys [name] :or {name "cli"}}]
  (-> (proc/sh (str "find ./target -name " name)) :out str/trim))

(defn get-headers []
  ;; TODO: These headers should be included by default in the AOT program
  ;; As of now, we expect the users to include these
  (->> ["third-party/nanobench/include"
        "third-party/folly"
        "third-party/bpptree/include"
        "third-party/immer"
        "third-party/magic_enum/include/magic_enum"
        "third-party/cli11/include"
        "third-party/ftxui/include"
        "third-party/libzippp/src"
        "third-party/cpptrace/include"
        "third-party/boost-preprocessor/include"
        "third-party/boost-multiprecision/include"]
       (map #(fs/path jank-build-dir "../" %))
       (concat ["/usr/lib/llvm-19/include"
                (str (fs/path jank-build-dir "../include/cpp"))])
       (map #(str "--include-dir " %))
       (str/join " ")))

(defn compile-command [module-path main-module {:keys [include-headers?
                                                       optimization-flag
                                                       output-file]
                                                :or {optimization-flag "-O0"
                                                     output-file "cli"}}]
  (str jank-exe " " optimization-flag " --module-path=" module-path
       " "
       (when include-headers? (get-headers))
       " compile " main-module " -o " output-file))

(use-fixtures
  :each
  (fn [f]
    (fs/delete-tree "./target")
    (println "Cleaned up 'target'")
    (f)))

(deftest aot-single-jank-module
  (let [alias-name  "single-jank-module"
        module-path (module-path alias-name)]
    (doseq [main-with-args? [true false]
            :let [main-module (if main-with-args?
                                "main-with-args"
                                "main-without-args")
                  args (if main-with-args?
                         " foo bar baz"
                         nil)
                  expected-output (slurp (str "expected-output/" alias-name "/" main-module))
                  compile-command (compile-command module-path main-module {})
                  cli-path (delay (find-binary {}))]]
      (testing (str alias-name " & " main-module)
        (println "Compile command: " compile-command)
        (is (= 0 (->> compile-command
                      (proc/sh {:out *out*
                                :err *out*})
                      :exit)))
        (is (= expected-output (-> @cli-path (str args)
                                   proc/sh :out))))
      (testing "Executable in temp directory"
        (fs/with-temp-dir [dir {}]
          (fs/move @cli-path dir)
          (is (= expected-output (->> (str "./cli " args)
                                      (proc/sh {:dir dir})
                                      :out))))))))

(deftest aot-multiple-jank-modules
  (let [alias-name "only-jank-modules"
        module-path (module-path alias-name)
        module "core"
        args " Admin 3000"
        output-filename "my-cli"
        expected-output (slurp (str "expected-output/" alias-name "/" module))
        compile-command (compile-command module-path module {:output-file output-filename})
        cli-path (delay (find-binary {:name output-filename}))]
    (testing (str alias-name " & core")
      (println "Compile command: " compile-command)
      (is (= 0 (->> compile-command
                    (proc/sh {:out *out*
                              :err *out*})
                    :exit)))
      (is (= expected-output (-> @cli-path (str args)
                                 proc/sh :out))))))

(deftest aot-jank-and-cpp-modules
  (let [alias-name "jank-and-cpp-modules"
        module-path (module-path alias-name)
        module "core"
        args " foo bar"
        expected-output (slurp (str "expected-output/" alias-name "/" module))
        compile-command (compile-command module-path module {:include-headers? true})
        cli-path (delay (find-binary {}))]
    (testing (str alias-name " & core")
      (println "Compile command: " compile-command)
      (is (= 0 (->> compile-command
                    (proc/sh {:out *out*
                              :err *out*})
                    :exit)))
      (is (= expected-output (-> @cli-path (str args)
                                 proc/sh :out))))))

(deftest aot-jank-and-cpp-modules-release-build
  (let [alias-name "jank-and-cpp-modules"
        module-path (module-path alias-name)
        module "core"
        args " foo bar"
        expected-output (slurp (str "expected-output/" alias-name "/" module))
        compile-command (compile-command module-path module {:include-headers? true
                                                             :optimization-flag "-O3"})
        cli-path (delay (find-binary {}))]
    (testing (str alias-name " & core")
      (println "Compile command: " compile-command)
      (is (= 0 (->> compile-command
                    (proc/sh {:out *out*
                              :err *out*})
                    :exit)))
      (is (= expected-output (-> @cli-path (str args)
                                 proc/sh :out))))))

(defn -main []
  (System/exit
   (if (t/successful? (t/run-tests this-nsym))
     0
     1)))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
