(let [steps (atom [])
      b     (fn* b []
              (try
                (throw :bthrow)
                (finally (swap! steps conj :b-finally))))
      a     (fn* a []
              (try
                (b)
                (catch e (swap! steps conj :a-catch))))]
  (a)
  (assert (= [:b-finally :a-catch] @steps)
          (pr-str @steps)))

(let [steps (atom [])
      b     (fn* b []
              (try
                (throw :bthrow)
                (catch e (swap! steps conj :b-catch))))
      a     (fn* a []
              (try
                (b)
                (finally (swap! steps conj :a-finally))))]
  (a)
  (assert (= [:b-catch :a-finally] @steps)
          (pr-str @steps)))

(let [steps (atom [])
      b     (fn* b []
              (try
                (throw :bthrow)
                (finally (swap! steps conj :b-finally))))
      a     (fn* a []
              (try
                (b)
                (catch e nil)
                (finally (swap! steps conj :a-finally))))]
  (a)
  (assert (= [:b-finally :a-finally] @steps)
          (pr-str @steps)))

(let [steps (atom [])
      b     (fn* b []
              (try
                (throw :bthrow)
                (catch e (swap! steps conj :b-catch) (throw e))))
      a     (fn* a []
              (try
                (b)
                (catch e (swap! steps conj :a-catch))))]
  (a)
  (assert (= [:b-catch :a-catch] @steps)
          (pr-str @steps)))

:success