; Test 1: (case 1)
; test case in value position
(let [xfn
      (case 1
        1   :one
        2   :two
        "3" :three
        :default)]
  (assert (= xfn :one)))

; test case in statement position
(let [xfn (fn []
            (case 1
              1   :one
              2   :two
              "3" :three
              :default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position
(assert
  (=
    (case 1
      1   :one
      2   :two
      "3" :three
      :default)
    :one))


; Test 2: (case "3")
; test case in value position
(let [xfn
      (case "3"
        1   :one
        2   :two
        "3" :three
        :default)]
  (assert (= xfn :three)))

; test case in statement position
(let [xfn (fn []
            (case "3"
              1   :one
              2   :two
              "3" :three
              :default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position
(assert
  (=
    (case "3"
      1   :one
      2   :two
      "3" :three
      :default)
    :three))


; Test 3: (case 1)
; test case in value position
(let [xfn
      (case 1
        1   :one
        2   :two
        "3" :three
        :default)]
  (assert (= xfn :one)))

; test case in statement position
(let [xfn (fn []
            (case 1
              1   :one
              2   :two
              "3" :three
              :default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position
(assert
  (=
    (case 1
      1   :one
      2   :two
      "3" :three
      :default)
    :one))


; Test 4: (case "3")
; test case in value position
(let [xfn
      (case "3"
        1   :one
        2   :two
        "3" :three
        :default)]
  (assert (= xfn :three)))

; test case in statement position
(let [xfn (fn []
            (case "3"
              1   :one
              2   :two
              "3" :three
              :default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position
(assert
  (=
    (case "3"
      1   :one
      2   :two
      "3" :three
      :default)
    :three))


:success