;; case-ratio-test.clj

;; ==================================================
;; Test: (case 3/4 4/3 :four-thirds 3/4 :three-fourths :default)
;; ==================================================

;; Value position
(let [xfn (let* [clojure_core-G__-4400 3/4]
            (case* clojure_core-G__-4400 0 1 :default
                       {0 (clojure.core/condp clojure.core/= clojure_core-G__-4400 3/4 :three-fourths
                            :default),
                        1 (clojure.core/condp clojure.core/= clojure_core-G__-4400 4/3 :four-thirds
                            :default)}
              :compact :hash-equiv nil))]
  (assert (= xfn :three-fourths) "Ratio value position test"))

;; Statement position
(let [xfn (fn []
            (let* [test-val 3/4]
              (let* [clojure_core-G__-4400 3/4]
                (case* clojure_core-G__-4400 0 1 :default
                           {0 (clojure.core/condp clojure.core/= clojure_core-G__-4400 3/4 :three-fourths
                                :default),
                            1 (clojure.core/condp clojure.core/= clojure_core-G__-4400 4/3 :four-thirds
                                :default)}
                  :compact :hash-equiv nil)))
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value) "Ratio statement position test"))

;; Return position (direct assertion)
(assert
 (=
  (let* [test-val 3/4]
    (let* [clojure_core-G__-4400 3/4]
      (case* clojure_core-G__-4400 0 1 :default
                 {0 (clojure.core/condp clojure.core/= clojure_core-G__-4400 3/4 :three-fourths
                      :default),
                  1 (clojure.core/condp clojure.core/= clojure_core-G__-4400 4/3 :four-thirds
                      :default)}
        :compact :hash-equiv nil)))
  :three-fourths)
 "Ratio return position test")

:success