; Test 1: (case 1 ...)

; test case in value position (outer layer)
(let [xfn
      (case 1
        1 (case 2
            2 :inner-match
            :inner-default)
        :outer-default)]
  (assert (= xfn :inner-match)))

; test case in statement position (outer layer)
(let [xfn (fn []
            (case 1
              1 (case 2
                  2 :inner-match
                  :inner-default)
              :outer-default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position (outer layer)
(assert
 (=
  (case 1
    1 (case 2
        2 :inner-match
        :inner-default)
    :outer-default)
  :inner-match))

; test case in value position (inner layer)
(let [xfn
      (case 1
        1 (case 2
            2 :inner-match
            :inner-default)
        :outer-default)]
  (assert (= xfn :inner-match)))

; test case in statement position (inner layer)
(let [xfn (fn []
            (case 1
              1 (case 2
                  2 :inner-match
                  :inner-default)
              :outer-default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position (inner layer)
(assert
 (=
  (case 2
    2 :inner-match
    :inner-default)
  :inner-match))


; Test 2: (case "outer" ...)

; test case in value position (outer layer)
(let [xfn
      (case "outer"
        "outer" (case "inner"
                  "inner" :inner-match
                  :inner-default)
        :outer-default)]
  (assert (= xfn :inner-match)))

; test case in statement position (outer layer)
(let [xfn (fn []
            (case "outer"
              "outer" (case "inner"
                        "inner" :inner-match
                        :inner-default)
              :outer-default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position (outer layer)
(assert
 (=
  (case "outer"
    "outer" (case "inner"
              "inner" :inner-match
              :inner-default)
    :outer-default)
  :inner-match))

; test case in value position (inner layer)
(let [xfn
      (case "outer"
        "outer" (case "inner"
                  "inner" :inner-match
                  :inner-default)
        :outer-default)]
  (assert (= xfn :inner-match)))

; test case in statement position (inner layer)
(let [xfn (fn []
            (case "outer"
              "outer" (case "inner"
                        "inner" :inner-match
                        :inner-default)
              :outer-default)
            :arbitrary-value)]
  (assert (= (xfn) :arbitrary-value)))

; test case in return position (inner layer)
(assert
 (=
  (case "inner"
    "inner" :inner-match
    :inner-default)
  :inner-match))

:success